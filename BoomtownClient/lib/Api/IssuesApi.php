<?php
/**
 * IssuesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * IssuesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssuesApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://boom-1-api.dev.gizmocreative.com/api/v2');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return IssuesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * cancelIssue
     *
     * Set a Issue to a cancelled status
     *
     * @param string $issue_id The primary key of the *Issue* to cancel. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelIssue($issue_id)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelIssueWithHttpInfo ($issue_id);
        return $response; 
    }


    /**
     * cancelIssueWithHttpInfo
     *
     * Set a Issue to a cancelled status
     *
     * @param string $issue_id The primary key of the *Issue* to cancel. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelIssueWithHttpInfo($issue_id)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling cancelIssue');
        }
  
        // parse inputs
        $resourcePath = "/issues/cancel/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createIssue
     *
     * Creates a new Issue
     *
     * @param \Swagger\Client\Model\Issue $issues Issue to create (optional)
     * @return \Swagger\Client\Model\IssueResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createIssue($issues = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createIssueWithHttpInfo ($issues);
        return $response; 
    }


    /**
     * createIssueWithHttpInfo
     *
     * Creates a new Issue
     *
     * @param \Swagger\Client\Model\Issue $issues Issue to create (optional)
     * @return Array of \Swagger\Client\Model\IssueResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createIssueWithHttpInfo($issues = null)
    {
        
  
        // parse inputs
        $resourcePath = "/issues/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($issues)) {
            $_tempBody = $issues;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createIssueLog
     *
     * Add a log to a Issue
     *
     * @param string $issue_id The primary key of the related *Issue* (required)
     * @param string $notes Notes to log against the *Issue* (required)
     * @return \Swagger\Client\Model\IssueLogsResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createIssueLog($issue_id, $notes)
    {
        list($response, $statusCode, $httpHeader) = $this->createIssueLogWithHttpInfo ($issue_id, $notes);
        return $response; 
    }


    /**
     * createIssueLogWithHttpInfo
     *
     * Add a log to a Issue
     *
     * @param string $issue_id The primary key of the related *Issue* (required)
     * @param string $notes Notes to log against the *Issue* (required)
     * @return Array of \Swagger\Client\Model\IssueLogsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createIssueLogWithHttpInfo($issue_id, $notes)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling createIssueLog');
        }
        // verify the required parameter 'notes' is set
        if ($notes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $notes when calling createIssueLog');
        }
  
        // parse inputs
        $resourcePath = "/issues/log/create/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/x-www-form-urlencoded'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($notes !== null) {
            
            
            $formParams['notes'] = $this->apiClient->getSerializer()->toFormValue($notes);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueLogsResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueLogsResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueLogsResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssue
     *
     * Returns a Issue
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return \Swagger\Client\Model\IssueResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssue($issue_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueWithHttpInfo ($issue_id);
        return $response; 
    }


    /**
     * getIssueWithHttpInfo
     *
     * Returns a Issue
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return Array of \Swagger\Client\Model\IssueResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueWithHttpInfo($issue_id)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling getIssue');
        }
  
        // parse inputs
        $resourcePath = "/issues/get/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueLogs
     *
     * Returns a collection of IssueLogs
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return \Swagger\Client\Model\IssueLogsResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueLogs($issue_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueLogsWithHttpInfo ($issue_id);
        return $response; 
    }


    /**
     * getIssueLogsWithHttpInfo
     *
     * Returns a collection of IssueLogs
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return Array of \Swagger\Client\Model\IssueLogsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueLogsWithHttpInfo($issue_id)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling getIssueLogs');
        }
  
        // parse inputs
        $resourcePath = "/issues/log/history/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueLogsResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueLogsResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueLogsResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueMetaCategories
     *
     * Returns collection of categories
     *
     * @return \Swagger\Client\Model\EnumerationItemResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaCategories()
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueMetaCategoriesWithHttpInfo ();
        return $response; 
    }


    /**
     * getIssueMetaCategoriesWithHttpInfo
     *
     * Returns collection of categories
     *
     * @return Array of \Swagger\Client\Model\EnumerationItemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaCategoriesWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/issues/meta/categories";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\EnumerationItemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\EnumerationItemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\EnumerationItemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueMetaResolutions
     *
     * Returns collection of resolutions
     *
     * @return \Swagger\Client\Model\EnumerationItemResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaResolutions()
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueMetaResolutionsWithHttpInfo ();
        return $response; 
    }


    /**
     * getIssueMetaResolutionsWithHttpInfo
     *
     * Returns collection of resolutions
     *
     * @return Array of \Swagger\Client\Model\EnumerationItemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaResolutionsWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/issues/meta/resolutions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\EnumerationItemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\EnumerationItemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\EnumerationItemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueMetaStatuses
     *
     * Returns collection of statuses
     *
     * @return \Swagger\Client\Model\EnumerationItemResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaStatuses()
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueMetaStatusesWithHttpInfo ();
        return $response; 
    }


    /**
     * getIssueMetaStatusesWithHttpInfo
     *
     * Returns collection of statuses
     *
     * @return Array of \Swagger\Client\Model\EnumerationItemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaStatusesWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/issues/meta/statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\EnumerationItemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\EnumerationItemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\EnumerationItemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueMetaTypes
     *
     * Returns collection of types
     *
     * @return \Swagger\Client\Model\EnumerationItemResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaTypes()
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueMetaTypesWithHttpInfo ();
        return $response; 
    }


    /**
     * getIssueMetaTypesWithHttpInfo
     *
     * Returns collection of types
     *
     * @return Array of \Swagger\Client\Model\EnumerationItemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueMetaTypesWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/issues/meta/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\EnumerationItemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\EnumerationItemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\EnumerationItemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssueStatusHistory
     *
     * Returns a collection of IssueStatuses
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return \Swagger\Client\Model\IssueStatusesResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueStatusHistory($issue_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getIssueStatusHistoryWithHttpInfo ($issue_id);
        return $response; 
    }


    /**
     * getIssueStatusHistoryWithHttpInfo
     *
     * Returns a collection of IssueStatuses
     *
     * @param string $issue_id The primary key of the *Issue* (required)
     * @return Array of \Swagger\Client\Model\IssueStatusesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssueStatusHistoryWithHttpInfo($issue_id)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling getIssueStatusHistory');
        }
  
        // parse inputs
        $resourcePath = "/issues/status/history/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueStatusesResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueStatusesResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueStatusesResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIssues
     *
     * Returns a collection of Issues
     *
     * @param int $limit Pagination result limit (defaults to 10) (optional)
     * @param int $start Pagination starting result number (defaults to 0) (optional)
     * @param string $members_id Optionally limit result to this {members_id} (optional)
     * @param string $members_users_id Optionally limit result to this {members_users_id} (optional)
     * @param string $members_locations_id Optionally limit result to this {members_locations_id} (optional)
     * @return \Swagger\Client\Model\IssueResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssues($limit = null, $start = null, $members_id = null, $members_users_id = null, $members_locations_id = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getIssuesWithHttpInfo ($limit, $start, $members_id, $members_users_id, $members_locations_id);
        return $response; 
    }


    /**
     * getIssuesWithHttpInfo
     *
     * Returns a collection of Issues
     *
     * @param int $limit Pagination result limit (defaults to 10) (optional)
     * @param int $start Pagination starting result number (defaults to 0) (optional)
     * @param string $members_id Optionally limit result to this {members_id} (optional)
     * @param string $members_users_id Optionally limit result to this {members_users_id} (optional)
     * @param string $members_locations_id Optionally limit result to this {members_locations_id} (optional)
     * @return Array of \Swagger\Client\Model\IssueResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIssuesWithHttpInfo($limit = null, $start = null, $members_id = null, $members_users_id = null, $members_locations_id = null)
    {
        
  
        // parse inputs
        $resourcePath = "/issues/get";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        $limit = (is_int($limit) ? $limit : 10);
        $start = (is_int($start) ? $start : 0);

        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }// query params
        
        if ($members_id !== null) {
            $queryParams['members_id'] = $this->apiClient->getSerializer()->toQueryValue($members_id);
        }// query params
        
        if ($members_users_id !== null) {
            $queryParams['members_users_id'] = $this->apiClient->getSerializer()->toQueryValue($members_users_id);
        }// query params
        
        if ($members_locations_id !== null) {
            $queryParams['members_locations_id'] = $this->apiClient->getSerializer()->toQueryValue($members_locations_id);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IssueResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IssueResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IssueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * resolveIssue
     *
     * Set a Issue to a resolved status
     *
     * @param string $issue_id The primary key of the *Issue* to resolve. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resolveIssue($issue_id)
    {
        list($response, $statusCode, $httpHeader) = $this->resolveIssueWithHttpInfo ($issue_id);
        return $response; 
    }


    /**
     * resolveIssueWithHttpInfo
     *
     * Set a Issue to a resolved status
     *
     * @param string $issue_id The primary key of the *Issue* to resolve. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resolveIssueWithHttpInfo($issue_id)
    {
        
        // verify the required parameter 'issue_id' is set
        if ($issue_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $issue_id when calling resolveIssue');
        }
  
        // parse inputs
        $resourcePath = "/issues/resolve/{issue_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($issue_id !== null) {
            $resourcePath = str_replace(
                "{" . "issue_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($issue_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Date');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Date'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Signature');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Signature'] = $apiKey;
        }
        
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Boomtown-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Boomtown-Token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
