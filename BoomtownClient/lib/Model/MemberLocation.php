<?php
/**
 * MemberLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * MemberLocation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MemberLocation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'members_id' => 'string',
        'street_1' => 'string',
        'street_2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zipcode' => 'string',
        'latitude' => 'double',
        'longitude' => 'double',
        'phone' => 'string',
        'site_name' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'members_id' => 'members_id',
        'street_1' => 'street_1',
        'street_2' => 'street_2',
        'city' => 'city',
        'state' => 'state',
        'zipcode' => 'zipcode',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'phone' => 'phone',
        'site_name' => 'site_name'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'members_id' => 'setMembersId',
        'street_1' => 'setStreet1',
        'street_2' => 'setStreet2',
        'city' => 'setCity',
        'state' => 'setState',
        'zipcode' => 'setZipcode',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'phone' => 'setPhone',
        'site_name' => 'setSiteName'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'members_id' => 'getMembersId',
        'street_1' => 'getStreet1',
        'street_2' => 'getStreet2',
        'city' => 'getCity',
        'state' => 'getState',
        'zipcode' => 'getZipcode',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'phone' => 'getPhone',
        'site_name' => 'getSiteName'
    );
  
    
    /**
      * $id Primary key.
      * @var string
      */
    protected $id;
    
    /**
      * $members_id The primary key of the related *Merchant*.
      * @var string
      */
    protected $members_id;
    
    /**
      * $street_1 Street address.
      * @var string
      */
    protected $street_1;
    
    /**
      * $street_2 Street address continued.
      * @var string
      */
    protected $street_2;
    
    /**
      * $city City.
      * @var string
      */
    protected $city;
    
    /**
      * $state State Identifier (2 char code).
      * @var string
      */
    protected $state;
    
    /**
      * $zipcode Postal Code.
      * @var string
      */
    protected $zipcode;
    
    /**
      * $latitude Latitude.
      * @var double
      */
    protected $latitude;
    
    /**
      * $longitude Longitude.
      * @var double
      */
    protected $longitude;
    
    /**
      * $phone Phone number.
      * @var string
      */
    protected $phone;
    
    /**
      * $site_name Informal reference, an alias.
      * @var string
      */
    protected $site_name;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->members_id = $data["members_id"];
            $this->street_1 = $data["street_1"];
            $this->street_2 = $data["street_2"];
            $this->city = $data["city"];
            $this->state = $data["state"];
            $this->zipcode = $data["zipcode"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->phone = $data["phone"];
            $this->site_name = $data["site_name"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Primary key.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets members_id
     * @return string
     */
    public function getMembersId()
    {
        return $this->members_id;
    }
  
    /**
     * Sets members_id
     * @param string $members_id The primary key of the related *Merchant*.
     * @return $this
     */
    public function setMembersId($members_id)
    {
        
        $this->members_id = $members_id;
        return $this;
    }
    
    /**
     * Gets street_1
     * @return string
     */
    public function getStreet1()
    {
        return $this->street_1;
    }
  
    /**
     * Sets street_1
     * @param string $street_1 Street address.
     * @return $this
     */
    public function setStreet1($street_1)
    {
        
        $this->street_1 = $street_1;
        return $this;
    }
    
    /**
     * Gets street_2
     * @return string
     */
    public function getStreet2()
    {
        return $this->street_2;
    }
  
    /**
     * Sets street_2
     * @param string $street_2 Street address continued.
     * @return $this
     */
    public function setStreet2($street_2)
    {
        
        $this->street_2 = $street_2;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city City.
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state State Identifier (2 char code).
     * @return $this
     */
    public function setState($state)
    {
        
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->zipcode;
    }
  
    /**
     * Sets zipcode
     * @param string $zipcode Postal Code.
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        
        $this->zipcode = $zipcode;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return double
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param double $latitude Latitude.
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return double
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param double $longitude Longitude.
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone Phone number.
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    
    /**
     * Gets site_name
     * @return string
     */
    public function getSiteName()
    {
        return $this->site_name;
    }
  
    /**
     * Sets site_name
     * @param string $site_name Informal reference, an alias.
     * @return $this
     */
    public function setSiteName($site_name)
    {
        
        $this->site_name = $site_name;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
