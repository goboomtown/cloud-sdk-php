<?php
/**
 * ProviderTeam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ProviderTeam Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProviderTeam implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'name' => 'string',
        'nickname' => 'string',
        'description' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'avatar' => 'string',
        'auto_assign_route' => 'bool',
        'auto_assign_sponsor' => 'bool',
        'status' => 'string',
        'type' => 'string',
        'exclusive' => 'bool',
        'published' => 'bool',
        'published_name' => 'string',
        'private_label' => 'bool',
        'brand_color1' => 'string',
        'brand_logo_1x' => 'string',
        'brand_logo_2x' => 'string',
        'brand_logo_3x' => 'string',
        'support_email' => 'string',
        'support_phone' => 'string',
        'support_url' => 'string',
        'created' => '\DateTime',
        'updated' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'nickname' => 'nickname',
        'description' => 'description',
        'email' => 'email',
        'phone' => 'phone',
        'avatar' => 'avatar',
        'auto_assign_route' => 'auto_assign_route',
        'auto_assign_sponsor' => 'auto_assign_sponsor',
        'status' => 'status',
        'type' => 'type',
        'exclusive' => 'exclusive',
        'published' => 'published',
        'published_name' => 'published_name',
        'private_label' => 'private_label',
        'brand_color1' => 'brand_color1',
        'brand_logo_1x' => 'brand_logo_1x',
        'brand_logo_2x' => 'brand_logo_2x',
        'brand_logo_3x' => 'brand_logo_3x',
        'support_email' => 'support_email',
        'support_phone' => 'support_phone',
        'support_url' => 'support_url',
        'created' => 'created',
        'updated' => 'updated'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'nickname' => 'setNickname',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'avatar' => 'setAvatar',
        'auto_assign_route' => 'setAutoAssignRoute',
        'auto_assign_sponsor' => 'setAutoAssignSponsor',
        'status' => 'setStatus',
        'type' => 'setType',
        'exclusive' => 'setExclusive',
        'published' => 'setPublished',
        'published_name' => 'setPublishedName',
        'private_label' => 'setPrivateLabel',
        'brand_color1' => 'setBrandColor1',
        'brand_logo_1x' => 'setBrandLogo1x',
        'brand_logo_2x' => 'setBrandLogo2x',
        'brand_logo_3x' => 'setBrandLogo3x',
        'support_email' => 'setSupportEmail',
        'support_phone' => 'setSupportPhone',
        'support_url' => 'setSupportUrl',
        'created' => 'setCreated',
        'updated' => 'setUpdated'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'nickname' => 'getNickname',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'avatar' => 'getAvatar',
        'auto_assign_route' => 'getAutoAssignRoute',
        'auto_assign_sponsor' => 'getAutoAssignSponsor',
        'status' => 'getStatus',
        'type' => 'getType',
        'exclusive' => 'getExclusive',
        'published' => 'getPublished',
        'published_name' => 'getPublishedName',
        'private_label' => 'getPrivateLabel',
        'brand_color1' => 'getBrandColor1',
        'brand_logo_1x' => 'getBrandLogo1x',
        'brand_logo_2x' => 'getBrandLogo2x',
        'brand_logo_3x' => 'getBrandLogo3x',
        'support_email' => 'getSupportEmail',
        'support_phone' => 'getSupportPhone',
        'support_url' => 'getSupportUrl',
        'created' => 'getCreated',
        'updated' => 'getUpdated'
    );
  
    
    /**
      * $id Primary key.
      * @var string
      */
    protected $id;
    
    /**
      * $name Name.
      * @var string
      */
    protected $name;
    
    /**
      * $nickname Hashtag nickname for group mentions in chat.
      * @var string
      */
    protected $nickname;
    
    /**
      * $description Description.
      * @var string
      */
    protected $description;
    
    /**
      * $email Email address.
      * @var string
      */
    protected $email;
    
    /**
      * $phone Primary contact phone number.
      * @var string
      */
    protected $phone;
    
    /**
      * $avatar URL to an avatar.
      * @var string
      */
    protected $avatar;
    
    /**
      * $auto_assign_route Automatically routes related merchant issues to this ProviderTeam.
      * @var bool
      */
    protected $auto_assign_route;
    
    /**
      * $auto_assign_sponsor Automatically assigns this ProviderTeam as the sponsor for related merchants.
      * @var bool
      */
    protected $auto_assign_sponsor;
    
    /**
      * $status Status.
      * @var string
      */
    protected $status;
    
    /**
      * $type Type / Category.
      * @var string
      */
    protected $type;
    
    /**
      * $exclusive Exclusive within it's type / category.
      * @var bool
      */
    protected $exclusive;
    
    /**
      * $published Published to the Connect App.
      * @var bool
      */
    protected $published;
    
    /**
      * $published_name Name, as publushed in the Connect App.
      * @var string
      */
    protected $published_name;
    
    /**
      * $private_label Enable private label branding.
      * @var bool
      */
    protected $private_label;
    
    /**
      * $brand_color1 Private label brand color, used if private_label is true.
      * @var string
      */
    protected $brand_color1;
    
    /**
      * $brand_logo_1x Private label logo, used if private_label is true.
      * @var string
      */
    protected $brand_logo_1x;
    
    /**
      * $brand_logo_2x Private label logo (x2), used if private_label is true.
      * @var string
      */
    protected $brand_logo_2x;
    
    /**
      * $brand_logo_3x Private label logo (x3), used if private_label is true.
      * @var string
      */
    protected $brand_logo_3x;
    
    /**
      * $support_email Primary support email address.
      * @var string
      */
    protected $support_email;
    
    /**
      * $support_phone Primary support phone number.
      * @var string
      */
    protected $support_phone;
    
    /**
      * $support_url Primary support website.
      * @var string
      */
    protected $support_url;
    
    /**
      * $created Date created.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $updated Date last updated.
      * @var \DateTime
      */
    protected $updated;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->nickname = $data["nickname"];
            $this->description = $data["description"];
            $this->email = $data["email"];
            $this->phone = $data["phone"];
            $this->avatar = $data["avatar"];
            $this->auto_assign_route = $data["auto_assign_route"];
            $this->auto_assign_sponsor = $data["auto_assign_sponsor"];
            $this->status = $data["status"];
            $this->type = $data["type"];
            $this->exclusive = $data["exclusive"];
            $this->published = $data["published"];
            $this->published_name = $data["published_name"];
            $this->private_label = $data["private_label"];
            $this->brand_color1 = $data["brand_color1"];
            $this->brand_logo_1x = $data["brand_logo_1x"];
            $this->brand_logo_2x = $data["brand_logo_2x"];
            $this->brand_logo_3x = $data["brand_logo_3x"];
            $this->support_email = $data["support_email"];
            $this->support_phone = $data["support_phone"];
            $this->support_url = $data["support_url"];
            $this->created = $data["created"];
            $this->updated = $data["updated"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Primary key.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }
  
    /**
     * Sets nickname
     * @param string $nickname Hashtag nickname for group mentions in chat.
     * @return $this
     */
    public function setNickname($nickname)
    {
        
        $this->nickname = $nickname;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Description.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Email address.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone Primary contact phone number.
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    
    /**
     * Gets avatar
     * @return string
     */
    public function getAvatar()
    {
        return $this->avatar;
    }
  
    /**
     * Sets avatar
     * @param string $avatar URL to an avatar.
     * @return $this
     */
    public function setAvatar($avatar)
    {
        
        $this->avatar = $avatar;
        return $this;
    }
    
    /**
     * Gets auto_assign_route
     * @return bool
     */
    public function getAutoAssignRoute()
    {
        return $this->auto_assign_route;
    }
  
    /**
     * Sets auto_assign_route
     * @param bool $auto_assign_route Automatically routes related merchant issues to this ProviderTeam.
     * @return $this
     */
    public function setAutoAssignRoute($auto_assign_route)
    {
        
        $this->auto_assign_route = $auto_assign_route;
        return $this;
    }
    
    /**
     * Gets auto_assign_sponsor
     * @return bool
     */
    public function getAutoAssignSponsor()
    {
        return $this->auto_assign_sponsor;
    }
  
    /**
     * Sets auto_assign_sponsor
     * @param bool $auto_assign_sponsor Automatically assigns this ProviderTeam as the sponsor for related merchants.
     * @return $this
     */
    public function setAutoAssignSponsor($auto_assign_sponsor)
    {
        
        $this->auto_assign_sponsor = $auto_assign_sponsor;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Status.
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Type / Category.
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets exclusive
     * @return bool
     */
    public function getExclusive()
    {
        return $this->exclusive;
    }
  
    /**
     * Sets exclusive
     * @param bool $exclusive Exclusive within it's type / category.
     * @return $this
     */
    public function setExclusive($exclusive)
    {
        
        $this->exclusive = $exclusive;
        return $this;
    }
    
    /**
     * Gets published
     * @return bool
     */
    public function getPublished()
    {
        return $this->published;
    }
  
    /**
     * Sets published
     * @param bool $published Published to the Connect App.
     * @return $this
     */
    public function setPublished($published)
    {
        
        $this->published = $published;
        return $this;
    }
    
    /**
     * Gets published_name
     * @return string
     */
    public function getPublishedName()
    {
        return $this->published_name;
    }
  
    /**
     * Sets published_name
     * @param string $published_name Name, as publushed in the Connect App.
     * @return $this
     */
    public function setPublishedName($published_name)
    {
        
        $this->published_name = $published_name;
        return $this;
    }
    
    /**
     * Gets private_label
     * @return bool
     */
    public function getPrivateLabel()
    {
        return $this->private_label;
    }
  
    /**
     * Sets private_label
     * @param bool $private_label Enable private label branding.
     * @return $this
     */
    public function setPrivateLabel($private_label)
    {
        
        $this->private_label = $private_label;
        return $this;
    }
    
    /**
     * Gets brand_color1
     * @return string
     */
    public function getBrandColor1()
    {
        return $this->brand_color1;
    }
  
    /**
     * Sets brand_color1
     * @param string $brand_color1 Private label brand color, used if private_label is true.
     * @return $this
     */
    public function setBrandColor1($brand_color1)
    {
        
        $this->brand_color1 = $brand_color1;
        return $this;
    }
    
    /**
     * Gets brand_logo_1x
     * @return string
     */
    public function getBrandLogo1x()
    {
        return $this->brand_logo_1x;
    }
  
    /**
     * Sets brand_logo_1x
     * @param string $brand_logo_1x Private label logo, used if private_label is true.
     * @return $this
     */
    public function setBrandLogo1x($brand_logo_1x)
    {
        
        $this->brand_logo_1x = $brand_logo_1x;
        return $this;
    }
    
    /**
     * Gets brand_logo_2x
     * @return string
     */
    public function getBrandLogo2x()
    {
        return $this->brand_logo_2x;
    }
  
    /**
     * Sets brand_logo_2x
     * @param string $brand_logo_2x Private label logo (x2), used if private_label is true.
     * @return $this
     */
    public function setBrandLogo2x($brand_logo_2x)
    {
        
        $this->brand_logo_2x = $brand_logo_2x;
        return $this;
    }
    
    /**
     * Gets brand_logo_3x
     * @return string
     */
    public function getBrandLogo3x()
    {
        return $this->brand_logo_3x;
    }
  
    /**
     * Sets brand_logo_3x
     * @param string $brand_logo_3x Private label logo (x3), used if private_label is true.
     * @return $this
     */
    public function setBrandLogo3x($brand_logo_3x)
    {
        
        $this->brand_logo_3x = $brand_logo_3x;
        return $this;
    }
    
    /**
     * Gets support_email
     * @return string
     */
    public function getSupportEmail()
    {
        return $this->support_email;
    }
  
    /**
     * Sets support_email
     * @param string $support_email Primary support email address.
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        
        $this->support_email = $support_email;
        return $this;
    }
    
    /**
     * Gets support_phone
     * @return string
     */
    public function getSupportPhone()
    {
        return $this->support_phone;
    }
  
    /**
     * Sets support_phone
     * @param string $support_phone Primary support phone number.
     * @return $this
     */
    public function setSupportPhone($support_phone)
    {
        
        $this->support_phone = $support_phone;
        return $this;
    }
    
    /**
     * Gets support_url
     * @return string
     */
    public function getSupportUrl()
    {
        return $this->support_url;
    }
  
    /**
     * Sets support_url
     * @param string $support_url Primary support website.
     * @return $this
     */
    public function setSupportUrl($support_url)
    {
        
        $this->support_url = $support_url;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Date created.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param \DateTime $updated Date last updated.
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
