<?php
/**
 * Provider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Provider Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Provider implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'name' => 'string',
        'name_legal' => 'string',
        'nickname' => 'string',
        'comm_id' => 'string',
        'description' => 'string',
        'street_1' => 'string',
        'street_2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zipcode' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'default_partners_teams_id' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'website' => 'string',
        'avatar' => 'string',
        'created' => '\DateTime',
        'updated' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'name_legal' => 'name_legal',
        'nickname' => 'nickname',
        'comm_id' => 'comm_id',
        'description' => 'description',
        'street_1' => 'street_1',
        'street_2' => 'street_2',
        'city' => 'city',
        'state' => 'state',
        'zipcode' => 'zipcode',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'default_partners_teams_id' => 'default_partners_teams_id',
        'email' => 'email',
        'phone' => 'phone',
        'website' => 'website',
        'avatar' => 'avatar',
        'created' => 'created',
        'updated' => 'updated'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'name_legal' => 'setNameLegal',
        'nickname' => 'setNickname',
        'comm_id' => 'setCommId',
        'description' => 'setDescription',
        'street_1' => 'setStreet1',
        'street_2' => 'setStreet2',
        'city' => 'setCity',
        'state' => 'setState',
        'zipcode' => 'setZipcode',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'default_partners_teams_id' => 'setDefaultPartnersTeamsId',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'website' => 'setWebsite',
        'avatar' => 'setAvatar',
        'created' => 'setCreated',
        'updated' => 'setUpdated'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'name_legal' => 'getNameLegal',
        'nickname' => 'getNickname',
        'comm_id' => 'getCommId',
        'description' => 'getDescription',
        'street_1' => 'getStreet1',
        'street_2' => 'getStreet2',
        'city' => 'getCity',
        'state' => 'getState',
        'zipcode' => 'getZipcode',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'default_partners_teams_id' => 'getDefaultPartnersTeamsId',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'website' => 'getWebsite',
        'avatar' => 'getAvatar',
        'created' => 'getCreated',
        'updated' => 'getUpdated'
    );
  
    
    /**
      * $id Primary key.
      * @var string
      */
    protected $id;
    
    /**
      * $name Business name.
      * @var string
      */
    protected $name;
    
    /**
      * $name_legal Business legal name.
      * @var string
      */
    protected $name_legal;
    
    /**
      * $nickname Hashtag nickname for group mentions in chat.
      * @var string
      */
    protected $nickname;
    
    /**
      * $comm_id The communication channel id.
      * @var string
      */
    protected $comm_id;
    
    /**
      * $description Description.
      * @var string
      */
    protected $description;
    
    /**
      * $street_1 Street address.
      * @var string
      */
    protected $street_1;
    
    /**
      * $street_2 Street address continued.
      * @var string
      */
    protected $street_2;
    
    /**
      * $city City.
      * @var string
      */
    protected $city;
    
    /**
      * $state State Identifier (2 char code).
      * @var string
      */
    protected $state;
    
    /**
      * $zipcode Postal Code.
      * @var string
      */
    protected $zipcode;
    
    /**
      * $latitude Business location latitude.
      * @var float
      */
    protected $latitude;
    
    /**
      * $longitude Business location longitude.
      * @var float
      */
    protected $longitude;
    
    /**
      * $default_partners_teams_id Default ProviderTeam's id.
      * @var string
      */
    protected $default_partners_teams_id;
    
    /**
      * $email Email address.
      * @var string
      */
    protected $email;
    
    /**
      * $phone Primary contact phone number.
      * @var string
      */
    protected $phone;
    
    /**
      * $website Business website/URL.
      * @var string
      */
    protected $website;
    
    /**
      * $avatar URL to an avatar.
      * @var string
      */
    protected $avatar;
    
    /**
      * $created Date created.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $updated Date last updated.
      * @var \DateTime
      */
    protected $updated;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->name_legal = $data["name_legal"];
            $this->nickname = $data["nickname"];
            $this->comm_id = $data["comm_id"];
            $this->description = $data["description"];
            $this->street_1 = $data["street_1"];
            $this->street_2 = $data["street_2"];
            $this->city = $data["city"];
            $this->state = $data["state"];
            $this->zipcode = $data["zipcode"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->default_partners_teams_id = $data["default_partners_teams_id"];
            $this->email = $data["email"];
            $this->phone = $data["phone"];
            $this->website = $data["website"];
            $this->avatar = $data["avatar"];
            $this->created = $data["created"];
            $this->updated = $data["updated"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Primary key.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Business name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets name_legal
     * @return string
     */
    public function getNameLegal()
    {
        return $this->name_legal;
    }
  
    /**
     * Sets name_legal
     * @param string $name_legal Business legal name.
     * @return $this
     */
    public function setNameLegal($name_legal)
    {
        
        $this->name_legal = $name_legal;
        return $this;
    }
    
    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }
  
    /**
     * Sets nickname
     * @param string $nickname Hashtag nickname for group mentions in chat.
     * @return $this
     */
    public function setNickname($nickname)
    {
        
        $this->nickname = $nickname;
        return $this;
    }
    
    /**
     * Gets comm_id
     * @return string
     */
    public function getCommId()
    {
        return $this->comm_id;
    }
  
    /**
     * Sets comm_id
     * @param string $comm_id The communication channel id.
     * @return $this
     */
    public function setCommId($comm_id)
    {
        
        $this->comm_id = $comm_id;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Description.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets street_1
     * @return string
     */
    public function getStreet1()
    {
        return $this->street_1;
    }
  
    /**
     * Sets street_1
     * @param string $street_1 Street address.
     * @return $this
     */
    public function setStreet1($street_1)
    {
        
        $this->street_1 = $street_1;
        return $this;
    }
    
    /**
     * Gets street_2
     * @return string
     */
    public function getStreet2()
    {
        return $this->street_2;
    }
  
    /**
     * Sets street_2
     * @param string $street_2 Street address continued.
     * @return $this
     */
    public function setStreet2($street_2)
    {
        
        $this->street_2 = $street_2;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city City.
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state State Identifier (2 char code).
     * @return $this
     */
    public function setState($state)
    {
        
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->zipcode;
    }
  
    /**
     * Sets zipcode
     * @param string $zipcode Postal Code.
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        
        $this->zipcode = $zipcode;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param float $latitude Business location latitude.
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param float $longitude Business location longitude.
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets default_partners_teams_id
     * @return string
     */
    public function getDefaultPartnersTeamsId()
    {
        return $this->default_partners_teams_id;
    }
  
    /**
     * Sets default_partners_teams_id
     * @param string $default_partners_teams_id Default ProviderTeam's id.
     * @return $this
     */
    public function setDefaultPartnersTeamsId($default_partners_teams_id)
    {
        
        $this->default_partners_teams_id = $default_partners_teams_id;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Email address.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone Primary contact phone number.
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    
    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }
  
    /**
     * Sets website
     * @param string $website Business website/URL.
     * @return $this
     */
    public function setWebsite($website)
    {
        
        $this->website = $website;
        return $this;
    }
    
    /**
     * Gets avatar
     * @return string
     */
    public function getAvatar()
    {
        return $this->avatar;
    }
  
    /**
     * Sets avatar
     * @param string $avatar URL to an avatar.
     * @return $this
     */
    public function setAvatar($avatar)
    {
        
        $this->avatar = $avatar;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Date created.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param \DateTime $updated Date last updated.
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
