<?php
/**
 * IssueLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * IssueLog Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IssueLog implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'issues_id' => 'string',
        'diff_log' => 'string',
        'notes' => 'string',
        'created' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'issues_id' => 'issues_id',
        'diff_log' => 'diff_log',
        'notes' => 'notes',
        'created' => 'created'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'issues_id' => 'setIssuesId',
        'diff_log' => 'setDiffLog',
        'notes' => 'setNotes',
        'created' => 'setCreated'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'issues_id' => 'getIssuesId',
        'diff_log' => 'getDiffLog',
        'notes' => 'getNotes',
        'created' => 'getCreated'
    );
  
    
    /**
      * $id Primary key.
      * @var string
      */
    protected $id;
    
    /**
      * $issues_id The primary key of the related *Issue*.
      * @var string
      */
    protected $issues_id;
    
    /**
      * $diff_log Differences.
      * @var string
      */
    protected $diff_log;
    
    /**
      * $notes Notes.
      * @var string
      */
    protected $notes;
    
    /**
      * $created Date created.
      * @var \DateTime
      */
    protected $created;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->issues_id = $data["issues_id"];
            $this->diff_log = $data["diff_log"];
            $this->notes = $data["notes"];
            $this->created = $data["created"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Primary key.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets issues_id
     * @return string
     */
    public function getIssuesId()
    {
        return $this->issues_id;
    }
  
    /**
     * Sets issues_id
     * @param string $issues_id The primary key of the related *Issue*.
     * @return $this
     */
    public function setIssuesId($issues_id)
    {
        
        $this->issues_id = $issues_id;
        return $this;
    }
    
    /**
     * Gets diff_log
     * @return string
     */
    public function getDiffLog()
    {
        return $this->diff_log;
    }
  
    /**
     * Sets diff_log
     * @param string $diff_log Differences.
     * @return $this
     */
    public function setDiffLog($diff_log)
    {
        
        $this->diff_log = $diff_log;
        return $this;
    }
    
    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }
  
    /**
     * Sets notes
     * @param string $notes Notes.
     * @return $this
     */
    public function setNotes($notes)
    {
        
        $this->notes = $notes;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Date created.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
