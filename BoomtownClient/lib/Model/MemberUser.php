<?php
/**
 * MemberUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * MemberUser Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MemberUser implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'members_id' => 'string',
        'members_locations_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'full_name' => 'string',
        'email' => 'string',
        'sms_number' => 'string',
        'lang' => 'string',
        'status' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'members_id' => 'members_id',
        'members_locations_id' => 'members_locations_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'full_name' => 'full_name',
        'email' => 'email',
        'sms_number' => 'sms_number',
        'lang' => 'lang',
        'status' => 'status'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'members_id' => 'setMembersId',
        'members_locations_id' => 'setMembersLocationsId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'email' => 'setEmail',
        'sms_number' => 'setSmsNumber',
        'lang' => 'setLang',
        'status' => 'setStatus'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'members_id' => 'getMembersId',
        'members_locations_id' => 'getMembersLocationsId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'email' => 'getEmail',
        'sms_number' => 'getSmsNumber',
        'lang' => 'getLang',
        'status' => 'getStatus'
    );
  
    
    /**
      * $id Primary key.
      * @var string
      */
    protected $id;
    
    /**
      * $members_id The primary key of the related *Merchant*.
      * @var string
      */
    protected $members_id;
    
    /**
      * $members_locations_id The primary key of the related *MerchantLocation*.
      * @var string
      */
    protected $members_locations_id;
    
    /**
      * $first_name First name.
      * @var string
      */
    protected $first_name;
    
    /**
      * $last_name Last name.
      * @var string
      */
    protected $last_name;
    
    /**
      * $full_name Concatenation of first and last name.
      * @var string
      */
    protected $full_name;
    
    /**
      * $email Email address.
      * @var string
      */
    protected $email;
    
    /**
      * $sms_number SMS capable phone number.
      * @var string
      */
    protected $sms_number;
    
    /**
      * $lang Language.
      * @var string
      */
    protected $lang;
    
    /**
      * $status Status.
      * @var string
      */
    protected $status;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->members_id = $data["members_id"];
            $this->members_locations_id = $data["members_locations_id"];
            $this->first_name = $data["first_name"];
            $this->last_name = $data["last_name"];
            $this->full_name = $data["full_name"];
            $this->email = $data["email"];
            $this->sms_number = $data["sms_number"];
            $this->lang = $data["lang"];
            $this->status = $data["status"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Primary key.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets members_id
     * @return string
     */
    public function getMembersId()
    {
        return $this->members_id;
    }
  
    /**
     * Sets members_id
     * @param string $members_id The primary key of the related *Merchant*.
     * @return $this
     */
    public function setMembersId($members_id)
    {
        
        $this->members_id = $members_id;
        return $this;
    }
    
    /**
     * Gets members_locations_id
     * @return string
     */
    public function getMembersLocationsId()
    {
        return $this->members_locations_id;
    }
  
    /**
     * Sets members_locations_id
     * @param string $members_locations_id The primary key of the related *MerchantLocation*.
     * @return $this
     */
    public function setMembersLocationsId($members_locations_id)
    {
        
        $this->members_locations_id = $members_locations_id;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name First name.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name Last name.
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    
    /**
     * Gets full_name
     * @return string
     */
    public function getFullName()
    {
        return $this->full_name;
    }
  
    /**
     * Sets full_name
     * @param string $full_name Concatenation of first and last name.
     * @return $this
     */
    public function setFullName($full_name)
    {
        
        $this->full_name = $full_name;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Email address.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets sms_number
     * @return string
     */
    public function getSmsNumber()
    {
        return $this->sms_number;
    }
  
    /**
     * Sets sms_number
     * @param string $sms_number SMS capable phone number.
     * @return $this
     */
    public function setSmsNumber($sms_number)
    {
        
        $this->sms_number = $sms_number;
        return $this;
    }
    
    /**
     * Gets lang
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }
  
    /**
     * Sets lang
     * @param string $lang Language.
     * @return $this
     */
    public function setLang($lang)
    {
        
        $this->lang = $lang;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Status.
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
